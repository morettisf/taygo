'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Separator = undefined;

var _decorateComponentWithProps = require('decorate-component-with-props');

var _decorateComponentWithProps2 = _interopRequireDefault(_decorateComponentWithProps);

var _draftJsButtons = require('draft-js-buttons');

var _createStore = require('./utils/createStore');

var _createStore2 = _interopRequireDefault(_createStore);

var _Toolbar = require('./components/Toolbar');

var _Toolbar2 = _interopRequireDefault(_Toolbar);

var _Separator = require('./components/Separator');

var _Separator2 = _interopRequireDefault(_Separator);

var _buttonStyles = {
  "buttonWrapper": "draftJsToolbar__buttonWrapper__1Dmqh",
  "button": "draftJsToolbar__button__qi1gf",
  "active": "draftJsToolbar__active__3qcpF"
};

var _buttonStyles2 = _interopRequireDefault(_buttonStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-line import/no-unresolved
var createInlineToolbarPlugin = function createInlineToolbarPlugin() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var store = (0, _createStore2.default)({
    isVisible: false
  });

  var _config$structure = config.structure;
  var structure = _config$structure === undefined ? [_draftJsButtons.BoldButton, _draftJsButtons.ItalicButton, _draftJsButtons.UnderlineButton, _draftJsButtons.CodeButton] : _config$structure;


  var toolbarProps = {
    store: store,
    structure: structure,
    buttonTheme: _buttonStyles2.default
  };

  return {
    initialize: function initialize(_ref) {
      var getEditorState = _ref.getEditorState;
      var setEditorState = _ref.setEditorState;

      store.updateItem('getEditorState', getEditorState);
      store.updateItem('setEditorState', setEditorState);
    },
    // Re-Render the text-toolbar on selection change
    onChange: function onChange(editorState) {
      var selection = editorState.getSelection();
      if (selection.getHasFocus() && !selection.isCollapsed()) {
        store.updateItem('isVisible', true);
      } else {
        store.updateItem('isVisible', false);
      }
      return editorState;
    },
    InlineToolbar: (0, _decorateComponentWithProps2.default)(_Toolbar2.default, toolbarProps)
  };
};

exports.default = createInlineToolbarPlugin;
exports.Separator = _Separator2.default;